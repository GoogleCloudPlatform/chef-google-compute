# Copyright 2018 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

require 'google/compute/property/array'
module Google
  module Compute
    module Data
      # A class to manage data for PathMatchers for url_map.
      class UrlMapPathMatch
        include Comparable

        attr_reader :default_service
        attr_reader :description
        attr_reader :name
        attr_reader :path_rules

        def to_json(_arg = nil)
          {
            'defaultService' => default_service,
            'description' => description,
            'name' => name,
            'pathRules' => path_rules
          }.reject { |_k, v| v.nil? }.to_json
        end

        def to_s
          {
            default_service: default_service.to_s,
            description: description.to_s,
            name: name.to_s,
            path_rules: ['[',
                         path_rules.map(&:to_json).join(', '),
                         ']'].join(' ')
          }.map { |k, v| "#{k}: #{v}" }.join(', ')
        end

        def ==(other)
          return false unless other.is_a? UrlMapPathMatch
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            return false if compare[:self] != compare[:other]
          end
          true
        end

        def <=>(other)
          return false unless other.is_a? UrlMapPathMatch
          compare_fields(other).each do |compare|
            next if compare[:self].nil? || compare[:other].nil?
            result = compare[:self] <=> compare[:other]
            return result unless result.zero?
          end
          0
        end

        def inspect
          to_json
        end

        private

        def compare_fields(other)
          [
            { self: default_service, other: other.default_service },
            { self: description, other: other.description },
            { self: name, other: other.name },
            { self: path_rules, other: other.path_rules }
          ]
        end
      end

      # Manages a UrlMapPathMatch nested object
      # Data is coming from the GCP API
      class UrlMapPathMatchApi < UrlMapPathMatch
        def initialize(args)
          @default_service =
            Google::Compute::Property::BackServSelfLinkRef.api_parse(args['defaultService'])
          @description = Google::Compute::Property::String.api_parse(args['description'])
          @name = Google::Compute::Property::String.api_parse(args['name'])
          @path_rules = Google::Compute::Property::UrlMapPathRulesArray.api_parse(args['pathRules'])
        end
      end

      # Manages a UrlMapPathMatch nested object
      # Data is coming from the Chef catalog
      class UrlMapPathMatchCatalog < UrlMapPathMatch
        def initialize(args)
          @default_service =
            Google::Compute::Property::BackServSelfLinkRef.catalog_parse(args[:default_service])
          @description = Google::Compute::Property::String.catalog_parse(args[:description])
          @name = Google::Compute::Property::String.catalog_parse(args[:name])
          @path_rules =
            Google::Compute::Property::UrlMapPathRulesArray.catalog_parse(args[:path_rules])
        end
      end
    end

    module Property
      # A class to manage input to PathMatchers for url_map.
      class UrlMapPathMatch
        def self.coerce
          ->(x) { ::Google::Compute::Property::UrlMapPathMatch.catalog_parse(x) }
        end

        # Used for parsing Chef catalog
        def self.catalog_parse(value)
          return if value.nil?
          return value if value.is_a? Data::UrlMapPathMatch
          Data::UrlMapPathMatchCatalog.new(value)
        end

        # Used for parsing GCP API responses
        def self.api_parse(value)
          return if value.nil?
          return value if value.is_a? Data::UrlMapPathMatch
          Data::UrlMapPathMatchApi.new(value)
        end
      end

      # A Chef property that holds an integer
      class UrlMapPathMatchArray < Google::Compute::Property::Array
        def self.coerce
          ->(x) { ::Google::Compute::Property::UrlMapPathMatchArray.catalog_parse(x) }
        end

        # Used for parsing Chef catalog
        def self.catalog_parse(value)
          return if value.nil?
          return UrlMapPathMatch.catalog_parse(value) \
            unless value.is_a?(::Array)
          value.map { |v| UrlMapPathMatch.catalog_parse(v) }
        end

        # Used for parsing GCP API responses
        def self.api_parse(value)
          return if value.nil?
          return UrlMapPathMatch.api_parse(value) \
            unless value.is_a?(::Array)
          value.map { |v| UrlMapPathMatch.api_parse(v) }
        end
      end
    end
  end
end
