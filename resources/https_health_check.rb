# Copyright 2017 Google Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by chef-codegen and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in README.md and
#     CONTRIBUTING.md located at the root of this package.
#
# ----------------------------------------------------------------------------

# Add our google/ lib
$LOAD_PATH.unshift ::File.expand_path('../libraries', ::File.dirname(__FILE__))

require 'chef/resource'
require 'google/compute/network/delete'
require 'google/compute/network/get'
require 'google/compute/network/post'
require 'google/compute/network/put'
require 'google/compute/property/integer'
require 'google/compute/property/string'
require 'google/compute/property/time'
require 'google/hash_utils'

module Google
  module GCOMPUTE
    # A provider to manage Google Compute Engine resources.
    # rubocop:disable Metrics/ClassLength
    class HttpsHealthCheck < Chef::Resource
      resource_name :gcompute_https_health_check

      property :check_interval_sec,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true
      property :creation_timestamp,
               Time,
               coerce: ::Google::Compute::Property::Time.coerce,
               desired_state: true
      property :description,
               String,
               coerce: ::Google::Compute::Property::String.coerce,
               desired_state: true
      property :healthy_threshold,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true
      property :host,
               String,
               coerce: ::Google::Compute::Property::String.coerce,
               desired_state: true
      property :id,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true
      property :hhc_label,
               String,
               coerce: ::Google::Compute::Property::String.coerce,
               name_property: true, desired_state: true
      property :port,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true
      property :request_path,
               String,
               coerce: ::Google::Compute::Property::String.coerce,
               desired_state: true
      property :timeout_sec,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true
      property :unhealthy_threshold,
               Integer,
               coerce: ::Google::Compute::Property::Integer.coerce,
               desired_state: true

      property :credential, String, desired_state: false, required: true
      property :project, String, desired_state: false, required: true

      action :create do
        fetch = fetch_resource(@new_resource, self_link(@new_resource),
                               'compute#httpsHealthCheck')
        if fetch.nil?
          converge_by ['Creating gcompute_https_health_check',
                       "[#{new_resource.name}]"].join do
            # TODO(nelsonjr): Show a list of variables to create
            # TODO(nelsonjr): Determine how to print green like update converge
            puts # making a newline until we find a better way TODO: find!
            compute_changes.each { |log| puts "    - #{log.strip}\n" }
            create_req = ::Google::Compute::Network::Post.new(
              collection(@new_resource), fetch_auth(@new_resource),
              'application/json', resource_to_request
            )
            wait_for_operation create_req.send, @new_resource
          end
        else
          @current_resource = @new_resource.clone
          @current_resource.check_interval_sec =
            ::Google::Compute::Property::Integer.api_parse(
              fetch['checkIntervalSec']
            )
          @current_resource.creation_timestamp =
            ::Google::Compute::Property::Time.api_parse(
              fetch['creationTimestamp']
            )
          @current_resource.description =
            ::Google::Compute::Property::String.api_parse(
              fetch['description']
            )
          @current_resource.healthy_threshold =
            ::Google::Compute::Property::Integer.api_parse(
              fetch['healthyThreshold']
            )
          @current_resource.host =
            ::Google::Compute::Property::String.api_parse(fetch['host'])
          @current_resource.id =
            ::Google::Compute::Property::Integer.api_parse(fetch['id'])
          @current_resource.hhc_label =
            ::Google::Compute::Property::String.api_parse(fetch['name'])
          @current_resource.port =
            ::Google::Compute::Property::Integer.api_parse(fetch['port'])
          @current_resource.request_path =
            ::Google::Compute::Property::String.api_parse(
              fetch['requestPath']
            )
          @current_resource.timeout_sec =
            ::Google::Compute::Property::Integer.api_parse(
              fetch['timeoutSec']
            )
          @current_resource.unhealthy_threshold =
            ::Google::Compute::Property::Integer.api_parse(
              fetch['unhealthyThreshold']
            )

          update
        end
      end

      action :delete do
        fetch = fetch_resource(@new_resource, self_link(@new_resource),
                               'compute#httpsHealthCheck')
        unless fetch.nil?
          converge_by ['Deleting gcompute_https_health_check',
                       "[#{new_resource.name}]"].join do
            delete_req = ::Google::Compute::Network::Delete.new(
              self_link(@new_resource), fetch_auth(@new_resource)
            )
            wait_for_operation delete_req.send, @new_resource
          end
        end
      end

      # TODO(nelsonjr): Add actions :manage and :modify

      private

      action_class do
        def resource_to_request
          request = {
            kind: 'compute#httpsHealthCheck',
            checkIntervalSec: new_resource.check_interval_sec,
            description: new_resource.description,
            healthyThreshold: new_resource.healthy_threshold,
            host: new_resource.host,
            name: new_resource.hhc_label,
            port: new_resource.port,
            requestPath: new_resource.request_path,
            timeoutSec: new_resource.timeout_sec,
            unhealthyThreshold: new_resource.unhealthy_threshold
          }.reject { |_, v| v.nil? }
          request.to_json
        end

        def update
          converge_if_changed do |_vars|
            # TODO(nelsonjr): Determine how to print indented like upd converge
            # TODO(nelsonjr): Check w/ Chef... can we print this in red?
            puts # making a newline until we find a better way TODO: find!
            compute_changes.each { |log| puts "    - #{log.strip}\n" }
            update_req =
              ::Google::Compute::Network::Put.new(self_link(@new_resource),
                                                  fetch_auth(@new_resource),
                                                  'application/json',
                                                  resource_to_request)
            wait_for_operation update_req.send, @new_resource
          end
        end

        def self.resource_to_hash(resource)
          {
            project: resource.project,
            name: resource.hhc_label,
            kind: 'compute#httpsHealthCheck',
            check_interval_sec: resource.check_interval_sec,
            creation_timestamp: resource.creation_timestamp,
            description: resource.description,
            healthy_threshold: resource.healthy_threshold,
            host: resource.host,
            id: resource.id,
            port: resource.port,
            request_path: resource.request_path,
            timeout_sec: resource.timeout_sec,
            unhealthy_threshold: resource.unhealthy_threshold
          }.reject { |_, v| v.nil? }
        end

        # Copied from Chef > Provider > #converge_if_changed
        def compute_changes
          properties = @new_resource.class.state_properties.map(&:name)
          properties = properties.map(&:to_sym)
          if current_resource
            compute_changes_for_existing_resource properties
          else
            compute_changes_for_new_resource properties
          end
        end

        # Collect the list of modified properties
        def compute_changes_for_existing_resource(properties)
          specified_properties = properties.select do |property|
            @new_resource.property_is_set?(property)
          end
          modified = specified_properties.reject do |p|
            @new_resource.send(p) == current_resource.send(p)
          end

          generate_pretty_green_text(modified)
        end

        def generate_pretty_green_text(modified)
          property_size = modified.map(&:size).max
          modified.map! do |p|
            properties_str = if @new_resource.sensitive
                               '(suppressed sensitive property)'
                             else
                               [
                                 @new_resource.send(p).inspect,
                                 "(was #{current_resource.send(p).inspect})"
                               ].join(' ')
                             end
            "  set #{p.to_s.ljust(property_size)} to #{properties_str}"
          end
        end

        # Write down any properties we are setting.
        def compute_changes_for_new_resource(properties)
          property_size = properties.map(&:size).max
          properties.map do |property|
            default = ' (default value)' \
              unless @new_resource.property_is_set?(property)
            next if @new_resource.send(property).nil?
            properties_str = if @new_resource.sensitive
                               '(suppressed sensitive property)'
                             else
                               @new_resource.send(property).inspect
                             end
            ["  set #{property.to_s.ljust(property_size)}",
             "to #{properties_str}#{default}"].join(' ')
          end.compact
        end

        def fetch_auth(resource)
          self.class.fetch_auth(resource)
        end

        def self.fetch_auth(resource)
          resource.resources("gauth_credential[#{resource.credential}]")
                  .authorization
        end

        def fetch_resource(resource, self_link, kind)
          self.class.fetch_resource(resource, self_link, kind)
        end

        def debug(message)
          Chef::Log.debug(message)
        end

        def self.collection(data)
          URI.join(
            'https://www.googleapis.com/compute/v1/',
            expand_variables(
              'projects/{{project}}/global/httpsHealthChecks',
              data
            )
          )
        end

        def collection(data)
          self.class.collection(data)
        end

        def self.self_link(data)
          URI.join(
            'https://www.googleapis.com/compute/v1/',
            expand_variables(
              'projects/{{project}}/global/httpsHealthChecks/{{name}}',
              data
            )
          )
        end

        def self_link(data)
          self.class.self_link(data)
        end

        # rubocop:disable Metrics/CyclomaticComplexity
        def self.return_if_object(response, kind)
          raise "Bad response: #{response.body}" \
            if response.is_a?(Net::HTTPBadRequest)
          raise "Bad response: #{response}" \
            unless response.is_a?(Net::HTTPResponse)
          return if response.is_a?(Net::HTTPNotFound)
          return if response.is_a?(Net::HTTPNoContent)
          result = JSON.parse(response.body)
          raise_if_errors result, %w[error errors], 'message'
          raise "Bad response: #{response}" unless response.is_a?(Net::HTTPOK)
          raise "Incorrect result: #{result['kind']} (expected '#{kind}')" \
            unless result['kind'] == kind
          result
        end
        # rubocop:enable Metrics/CyclomaticComplexity

        def return_if_object(response, kind)
          self.class.return_if_object(response, kind)
        end

        def self.extract_variables(template)
          template.scan(/{{[^}]*}}/).map { |v| v.gsub(/{{([^}]*)}}/, '\1') }
                  .map(&:to_sym)
        end

        def self.expand_variables(template, var_data, extra_data = {})
          data = if var_data.class <= Hash
                   var_data.merge(extra_data)
                 else
                   resource_to_hash(var_data).merge(extra_data)
                 end
          extract_variables(template).each do |v|
            unless data.key?(v)
              raise "Missing variable :#{v} in #{data} on #{caller.join("\n")}}"
            end
            template.gsub!(/{{#{v}}}/, CGI.escape(data[v].to_s))
          end
          template
        end

        def expand_variables(template, var_data, extra_data = {})
          self.class.expand_variables(template, var_data, extra_data)
        end

        def fetch_resource(resource, self_link, kind)
          self.class.fetch_resource(resource, self_link, kind)
        end

        def async_op_url(data, extra_data = {})
          URI.join(
            'https://www.googleapis.com/compute/v1/',
            expand_variables(
              'projects/{{project}}/global/operations/{{op_id}}',
              data, extra_data
            )
          )
        end

        def wait_for_operation(response, resource)
          op_result = return_if_object(response, 'compute#operation')
          return if op_result.nil?
          status = ::Google::HashUtils.navigate(op_result, %w[status])
          wait_done = wait_for_completion(status, op_result, resource)
          fetch_resource(
            resource,
            URI.parse(::Google::HashUtils.navigate(wait_done,
                                                   %w[targetLink])),
            'compute#httpsHealthCheck'
          )
        end

        def wait_for_completion(status, op_result, resource)
          op_id = ::Google::HashUtils.navigate(op_result, %w[name])
          op_uri = async_op_url(resource, op_id: op_id)
          while status != 'DONE'
            debug("Waiting for completion of operation #{op_id}")
            raise_if_errors op_result, %w[error errors], 'message'
            sleep 1.0
            raise "Invalid result '#{status}' on gcompute_https_health_check." \
              unless %w[PENDING RUNNING DONE].include?(status)
            op_result = fetch_resource(resource, op_uri, 'compute#operation')
            status = ::Google::HashUtils.navigate(op_result, %w[status])
          end
          op_result
        end

        def raise_if_errors(response, err_path, msg_field)
          self.class.raise_if_errors(response, err_path, msg_field)
        end

        def self.fetch_resource(resource, self_link, kind)
          get_request = ::Google::Compute::Network::Get.new(
            self_link, fetch_auth(resource)
          )
          return_if_object get_request.send, kind
        end

        def self.raise_if_errors(response, err_path, msg_field)
          errors = ::Google::HashUtils.navigate(response, err_path)
          raise_error(errors, msg_field) unless errors.nil?
        end

        def self.raise_error(errors, msg_field)
          raise IOError, ['Operation failed:',
                          errors.map { |e| e[msg_field] }.join(', ')].join(' ')
        end
      end
    end
    # rubocop:enable Metrics/ClassLength
  end
end
